#!/usr/bin/env lua

-- Get and copy a clean environment.
if bit32 then
  bit = bit32;
else
  local succ;
  succ, bit = pcall(require, "bit32");
  if not succ then
    bit = require "bit";
  end;
end;

if not unpack then
    unpack = table.unpack;
end;

local pristine={};
for k,v in pairs(_G) do
	pristine[k]=v;
end;

require "lfs"

require "fritomod/currying";
require "fritomod/LuaEnvironment";
require "fritomod/LuaEnvironment-Loaders";
require "fritomod/AllTests";

if arg then
	for i=1,#arg do
		arg[i]=arg[i]:gsub("^[.]/", "");
		arg[i]=arg[i]:gsub("[.]lua", "");
		local env=LuaEnvironment:New(pristine, false);
		env:AddLoader(LuaEnvironment.Loaders.Ignore("bit", "lfs"));
		env:AddLoader(LuaEnvironment.Loaders.Filesystem());
		env:Set("AllTests", AllTests);
		env:Require("bin/global");
		env:Require(arg[i]);
	end;
end;

if #arg > 0 and AllTests:GetCount() > 0 then
	local tests, numRan, numSuccessful, numFailed;

	AllTests:AddListener(Metatables.Noop({
		StartAllTests = function(self, suite, name, runner, reason)
			tests = {};
			numRan = 0;
			numSuccessful = 0;
			numFailed = 0;
		end,

		FinishAllTests = function(self, suite, successful, report)
			if successful then
				print(("Cumulative: All %d tests ran successfully."):format(numRan));
			else
				print(("Cumulative: %d of %d tests ran successfully. %d failed"):format(
					numSuccessful,
					numRan,
					numFailed
                ));
			end;
		end
	}));

	AllTests:AddRecursiveListener(Metatables.Noop({
		TestStarted = function(self, suite, name)
			numRan = numRan + 1;
		end,

		TestSuccessful = function(self, suite, name, runner, reason)
			numSuccessful = numSuccessful + 1;
		end,

		TestFailed = function(self, suite, name, runner, reason)
			numFailed = numFailed + 1;
			local testIndex = #tests + 1;
			print(("[FAIL] %d. %s\n  %s\n"):format(testIndex, name, reason:gsub("\n", "\n")));
			Lists.Insert(tests, runner);
		end,
	}));
	AllTests:Run();
end;

-- vim: set ft=lua :
